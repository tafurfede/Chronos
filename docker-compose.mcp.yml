version: '3.8'

services:
  # MCP Trading Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: mcp-trading-server
    ports:
      - "8080:8080"  # MCP server port
      - "9090:9090"  # Metrics port
    env_file:
      - config/.env
    environment:
      - MCP_SERVER_PORT=8080
      - MCP_MODE=production
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Client Interface (Web UI)
  mcp-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: mcp-trading-client
    ports:
      - "3001:3000"  # Web UI port
    environment:
      - MCP_SERVER_URL=http://mcp-server:8080
      - REACT_APP_MCP_URL=http://localhost:8080
    depends_on:
      - mcp-server
    networks:
      - mcp-network

  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: mcp-postgres
    environment:
      - POSTGRES_DB=ml_trading
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - mcp-network

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - postgres
      - redis
    networks:
      - mcp-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mcp-network

  # Jupyter for interactive analysis
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: mcp-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-quantnexus}
      - MCP_SERVER_URL=http://mcp-server:8080
    volumes:
      - ./:/home/jovyan/work
      - jupyter_data:/home/jovyan
    networks:
      - mcp-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:
  jupyter_data:

networks:
  mcp-network:
    driver: bridge