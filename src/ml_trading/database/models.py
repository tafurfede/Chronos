"""
SQLAlchemy Models for QuantNexus ML Trading System
"""

from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any
from sqlalchemy import (
    create_engine, Column, Integer, String, Float, DateTime, 
    Boolean, JSON, DECIMAL, Text, Index, UniqueConstraint,
    ForeignKey, Enum as SQLEnum
)
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.dialects.postgresql import JSONB, ARRAY
import enum

Base = declarative_base()

class OrderSide(enum.Enum):
    BUY = "buy"
    SELL = "sell"

class OrderStatus(enum.Enum):
    PENDING = "pending"
    FILLED = "filled"
    PARTIALLY_FILLED = "partially_filled"
    CANCELLED = "cancelled"
    REJECTED = "rejected"

class SignalType(enum.Enum):
    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"

class SeverityLevel(enum.Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class Trade(Base):
    """Trade execution records"""
    __tablename__ = 'trades'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    symbol = Column(String(10), nullable=False, index=True)
    side = Column(SQLEnum(OrderSide), nullable=False)
    quantity = Column(DECIMAL(15, 4), nullable=False)
    price = Column(DECIMAL(15, 4), nullable=False)
    order_type = Column(String(20), nullable=False)
    status = Column(SQLEnum(OrderStatus), nullable=False)
    filled_qty = Column(DECIMAL(15, 4), default=0)
    filled_avg_price = Column(DECIMAL(15, 4))
    commission = Column(DECIMAL(10, 4), default=0)
    strategy_name = Column(String(50), index=True)
    signal_strength = Column(DECIMAL(5, 4))
    stop_loss = Column(DECIMAL(15, 4))
    take_profit = Column(DECIMAL(15, 4))
    created_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow, primary_key=True)
    executed_at = Column(DateTime(timezone=True))
    closed_at = Column(DateTime(timezone=True))
    pnl = Column(DECIMAL(15, 4))
    pnl_percentage = Column(DECIMAL(10, 4))
    meta_data = Column('metadata', JSONB)
    
    __table_args__ = (
        Index('idx_trades_symbol_time', 'symbol', 'created_at'),
        Index('idx_trades_status', 'status'),
        Index('idx_trades_strategy', 'strategy_name'),
    )
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'id': self.id,
            'symbol': self.symbol,
            'side': self.side.value if self.side else None,
            'quantity': float(self.quantity) if self.quantity else 0,
            'price': float(self.price) if self.price else 0,
            'status': self.status.value if self.status else None,
            'pnl': float(self.pnl) if self.pnl else 0,
            'created_at': self.created_at.isoformat() if self.created_at else None
        }

class MarketData(Base):
    """Market data time series"""
    __tablename__ = 'market_data'
    
    symbol = Column(String(10), nullable=False, primary_key=True)
    timestamp = Column(DateTime(timezone=True), nullable=False, primary_key=True)
    open = Column(DECIMAL(15, 4), nullable=False)
    high = Column(DECIMAL(15, 4), nullable=False)
    low = Column(DECIMAL(15, 4), nullable=False)
    close = Column(DECIMAL(15, 4), nullable=False)
    volume = Column(Integer, nullable=False)
    vwap = Column(DECIMAL(15, 4))
    bid = Column(DECIMAL(15, 4))
    ask = Column(DECIMAL(15, 4))
    spread = Column(DECIMAL(15, 4))
    
    __table_args__ = (
        Index('idx_market_data_symbol_time', 'symbol', 'timestamp'),
    )

class Signal(Base):
    """Trading signals generated by models"""
    __tablename__ = 'signals'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow, primary_key=True)
    symbol = Column(String(10), nullable=False, index=True)
    signal_type = Column(SQLEnum(SignalType), nullable=False)
    strength = Column(DECIMAL(5, 4), nullable=False)
    strategy_name = Column(String(50), nullable=False)
    model_name = Column(String(50))
    confidence = Column(DECIMAL(5, 4))
    features = Column(JSONB)
    indicators = Column(JSONB)
    meta_data = Column('metadata', JSONB)
    executed = Column(Boolean, default=False, index=True)
    trade_id = Column(Integer)
    
    __table_args__ = (
        Index('idx_signals_symbol_time', 'symbol', 'timestamp'),
        Index('idx_signals_type', 'signal_type'),
    )
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'id': self.id,
            'timestamp': self.timestamp.isoformat() if self.timestamp else None,
            'symbol': self.symbol,
            'signal_type': self.signal_type.value if self.signal_type else None,
            'strength': float(self.strength) if self.strength else 0,
            'confidence': float(self.confidence) if self.confidence else 0,
            'executed': self.executed
        }

class PortfolioHistory(Base):
    """Portfolio snapshots over time"""
    __tablename__ = 'portfolio_history'
    
    timestamp = Column(DateTime(timezone=True), nullable=False, primary_key=True)
    total_value = Column(DECIMAL(20, 4), nullable=False)
    cash_balance = Column(DECIMAL(20, 4), nullable=False)
    positions_value = Column(DECIMAL(20, 4), nullable=False)
    daily_pnl = Column(DECIMAL(15, 4))
    daily_return = Column(DECIMAL(10, 6))
    cumulative_return = Column(DECIMAL(10, 6))
    sharpe_ratio = Column(DECIMAL(10, 4))
    max_drawdown = Column(DECIMAL(10, 6))
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    total_trades = Column(Integer, default=0)
    win_rate = Column(DECIMAL(5, 4))
    meta_data = Column('metadata', JSONB)

class Position(Base):
    """Current open positions"""
    __tablename__ = 'positions'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    symbol = Column(String(10), nullable=False, unique=True)
    quantity = Column(DECIMAL(15, 4), nullable=False)
    avg_entry_price = Column(DECIMAL(15, 4), nullable=False)
    current_price = Column(DECIMAL(15, 4))
    market_value = Column(DECIMAL(20, 4))
    unrealized_pnl = Column(DECIMAL(15, 4))
    unrealized_pnl_pct = Column(DECIMAL(10, 4))
    opened_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)
    updated_at = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)
    strategy_name = Column(String(50))
    meta_data = Column('metadata', JSONB)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'symbol': self.symbol,
            'quantity': float(self.quantity) if self.quantity else 0,
            'avg_entry_price': float(self.avg_entry_price) if self.avg_entry_price else 0,
            'current_price': float(self.current_price) if self.current_price else 0,
            'unrealized_pnl': float(self.unrealized_pnl) if self.unrealized_pnl else 0,
            'unrealized_pnl_pct': float(self.unrealized_pnl_pct) if self.unrealized_pnl_pct else 0
        }

class RiskMetrics(Base):
    """Risk metrics time series"""
    __tablename__ = 'risk_metrics'
    
    timestamp = Column(DateTime(timezone=True), nullable=False, primary_key=True)
    var_95 = Column(DECIMAL(15, 4))
    var_99 = Column(DECIMAL(15, 4))
    cvar_95 = Column(DECIMAL(15, 4))
    beta = Column(DECIMAL(10, 4))
    correlation_spy = Column(DECIMAL(10, 4))
    volatility_daily = Column(DECIMAL(10, 6))
    volatility_annual = Column(DECIMAL(10, 6))
    leverage = Column(DECIMAL(10, 4))
    concentration_top5 = Column(DECIMAL(10, 4))
    meta_data = Column('metadata', JSONB)

class ModelPerformance(Base):
    """ML model performance tracking"""
    __tablename__ = 'model_performance'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow, primary_key=True)
    model_name = Column(String(100), nullable=False)
    model_version = Column(String(50))
    accuracy = Column(DECIMAL(10, 6))
    precision_score = Column(DECIMAL(10, 6))
    recall_score = Column(DECIMAL(10, 6))
    f1_score = Column(DECIMAL(10, 6))
    sharpe_ratio = Column(DECIMAL(10, 4))
    total_predictions = Column(Integer)
    correct_predictions = Column(Integer)
    training_date = Column(DateTime(timezone=True))
    features_used = Column(ARRAY(Text))
    hyperparameters = Column(JSONB)
    meta_data = Column('metadata', JSONB)

class ErrorLog(Base):
    """System error logging"""
    __tablename__ = 'error_logs'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    timestamp = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow, primary_key=True)
    error_type = Column(String(100), nullable=False)
    error_message = Column(Text, nullable=False)
    stack_trace = Column(Text)
    component = Column(String(100))
    severity = Column(SQLEnum(SeverityLevel), nullable=False)
    resolved = Column(Boolean, default=False)
    resolution_notes = Column(Text)
    meta_data = Column('metadata', JSONB)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            'id': self.id,
            'timestamp': self.timestamp.isoformat() if self.timestamp else None,
            'error_type': self.error_type,
            'error_message': self.error_message,
            'severity': self.severity.value if self.severity else None,
            'resolved': self.resolved
        }